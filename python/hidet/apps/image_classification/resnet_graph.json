{
  "graphs": [
    {
      "name": "",
      "inputs": [
        {
          "name": "input:0",
          "arguments": [
            {
              "name": "input:0",
              "type": {
                "string": "float32['bs', '3', 'h', 'w']",
                "shape": {
                  "dimensions": [
                    "bs",
                    "3",
                    "h",
                    "w"
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "outputs": [
        {
          "name": "output:0",
          "arguments": [
            {
              "name": "351_Add:0",
              "type": {
                "string": "float32['bs', '1000']",
                "shape": {
                  "dimensions": [
                    "bs",
                    "1000"
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "nodes": [
        {
          "name": "0_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "float32['bs', '3', 'h', 'w']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "3",
                        "h",
                        "w"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "0_Pad:0",
                  "type": {
                    "string": "float32['bs', '3', '(h + 6)', '(w + 6)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "3",
                        "(h + 6)",
                        "(w + 6)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 3, 3, 0, 0, 3, 3]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 3, h, w])",
            "    out: tensor(float32, [bs, 3, ((3 + h) + 3), ((3 + w) + 3)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 3, ((3 + h) + 3), ((3 + w) + 3)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 3))) && ((0 <= (v_2 - 3)) && ((v_2 - 3) < h))) && ((0 <= (v_3 - 3)) && ((v_3 - 3) < w))) ? data[v, v_1, (v_2 - 3), (v_3 - 3)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "1_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "0_Pad:0",
                  "type": {
                    "string": "float32['bs', '3', '(h + 6)', '(w + 6)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "3",
                        "(h + 6)",
                        "(w + 6)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32['64', '3', '7', '7']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "3",
                        "7",
                        "7"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "1_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 3, (h + 6), (w + 6)])",
            "    w: tensor(float32, [64, 3, 7, 7])",
            "    out: tensor(float32, [bs, 64, (((((h + 6) - 6) - 1) / 2) + 1), (((((w + 6) - 6) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 3, (h + 6), (w + 6)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 3))) && ((0 <= v_2) && (v_2 < (h + 6)))) && ((0 <= v_3) && (v_3 < (w + 6)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, (((((h + 6) - 6) - 1) / 2) + 1), (((((w + 6) - 6) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([3, 7, 7], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 3) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "2_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "1_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:1",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "2_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 2) + 1) == 1) ? 0 : v_2), (((((w - 1) / 2) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "3_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "2_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:2",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "3_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 2) + 1) == 1) ? 0 : v_2), (((((w - 1) / 2) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "4_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "3_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:3",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "4_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 2) + 1) == 1) ? 0 : v_2), (((((w - 1) / 2) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "5_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "4_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:4",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "5_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 2) + 1) == 1) ? 0 : v_2), (((((w - 1) / 2) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "6_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "5_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "6_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "7_MaxPool2d",
          "type": {
            "name": "MaxPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "6_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 2) + 1)', '(((w - 1) / 2) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 2) + 1)",
                        "(((w - 1) / 2) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "7_MaxPool2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "int",
              "value": "3",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "ceil_mode",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: max_pool2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 2) + 1), (((w - 1) / 2) + 1)])",
            "    y: tensor(float32, [bs, 64, ((((((((h - 1) / 2) + 1) + 1) + 1) - 3) / 2) + 1), ((((((((w - 1) / 2) + 1) + 1) + 1) - 3) / 2) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    pad: float32[bs, 64, (((((h - 1) / 2) + 1) + 1) + 1), (((((w - 1) / 2) + 1) + 1) + 1)] where pad[v, v_1, v_2, v_3] = (((((1 <= v_2) && (v_2 < (((h - 1) / 2) + 2))) && (1 <= v_3)) && (v_3 < (((w - 1) / 2) + 2))) ? x[v, v_1, (v_2 - 1), (v_3 - 1)] : -3.4028234663852886e+38f)",
            "    y: float32[bs, 64, ((((((((h - 1) / 2) + 1) + 1) + 1) - 3) / 2) + 1), ((((((((w - 1) / 2) + 1) + 1) + 1) - 3) / 2) + 1)] where y[v_4, v_5, v_6, v_7] = reduce([3, 3], (v_8, v_9) => pad[v_4, v_5, ((v_6 * 2) + v_8), ((v_7 * 2) + v_9)], max)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "8_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "7_MaxPool2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:5",
                  "type": {
                    "string": "float32['64', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "8_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [64, 64, 1, 1])",
            "    out: tensor(float32, [bs, 64, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "9_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "8_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:6",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "9_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "10_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "9_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:7",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "10_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "11_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "10_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:8",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "11_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "12_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "11_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:9",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "12_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "13_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "12_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "13_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "14_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "13_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "14_Pad:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    out: tensor(float32, [bs, 64, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 64, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 4) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 4) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "15_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "14_Pad:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:10",
                  "type": {
                    "string": "float32['64', '64', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "64",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "15_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)])",
            "    w: tensor(float32, [64, 64, 3, 3])",
            "    out: tensor(float32, [bs, 64, ((((((h - 1) / 4) + 3) - 2) - 1) + 1), ((((((w - 1) / 4) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, ((((((h - 1) / 4) + 3) - 2) - 1) + 1), ((((((w - 1) / 4) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "16_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "15_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:11",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "16_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "17_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "16_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:12",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "17_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "18_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "17_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:13",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "18_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "19_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "18_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:14",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "19_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "20_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "19_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "20_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "21_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "20_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:15",
                  "type": {
                    "string": "float32['256', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "21_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [256, 64, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "22_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "21_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:16",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "22_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "23_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "22_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:17",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "23_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "24_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "23_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:18",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "24_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "25_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "24_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:19",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "25_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "26_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "7_MaxPool2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:20",
                  "type": {
                    "string": "float32['256', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "26_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [256, 64, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "27_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "26_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:21",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "27_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "28_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "27_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:22",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "28_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "29_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "28_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:23",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "29_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "30_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "29_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:24",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "30_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "31_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "25_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "30_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "31_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "32_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "31_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "32_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "33_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "32_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:25",
                  "type": {
                    "string": "float32['64', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "33_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [64, 256, 1, 1])",
            "    out: tensor(float32, [bs, 64, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "34_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "33_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:26",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "34_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "35_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "34_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:27",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "35_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "36_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "35_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:28",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "36_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "37_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "36_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:29",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "37_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "38_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "37_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "38_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "39_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "38_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "39_Pad:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    out: tensor(float32, [bs, 64, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 64, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 4) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 4) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "40_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "39_Pad:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:30",
                  "type": {
                    "string": "float32['64', '64', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "64",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "40_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)])",
            "    w: tensor(float32, [64, 64, 3, 3])",
            "    out: tensor(float32, [bs, 64, ((((((h - 1) / 4) + 3) - 2) - 1) + 1), ((((((w - 1) / 4) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, ((((((h - 1) / 4) + 3) - 2) - 1) + 1), ((((((w - 1) / 4) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "41_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "40_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:31",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "41_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "42_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "41_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:32",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "42_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "43_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "42_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:33",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "43_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "44_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "43_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:34",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "44_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "45_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "44_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "45_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "46_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "45_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:35",
                  "type": {
                    "string": "float32['256', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "46_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [256, 64, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "47_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "46_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:36",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "47_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "48_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "47_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:37",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "48_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "49_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "48_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:38",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "49_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "50_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "49_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:39",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "50_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "51_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "50_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "32_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "51_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "52_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "51_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "52_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "53_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "52_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:40",
                  "type": {
                    "string": "float32['64', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "53_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [64, 256, 1, 1])",
            "    out: tensor(float32, [bs, 64, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "54_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "53_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:41",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "54_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "55_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "54_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:42",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "55_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "56_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "55_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:43",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "56_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "57_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "56_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:44",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "57_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "58_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "57_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "58_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "59_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "58_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "59_Pad:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    out: tensor(float32, [bs, 64, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 64, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 4) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 4) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "60_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "59_Pad:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:45",
                  "type": {
                    "string": "float32['64', '64', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "64",
                        "64",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "60_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)])",
            "    w: tensor(float32, [64, 64, 3, 3])",
            "    out: tensor(float32, [bs, 64, ((((((h - 1) / 4) + 3) - 2) - 1) + 1), ((((((w - 1) / 4) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 64, ((((((h - 1) / 4) + 3) - 2) - 1) + 1), ((((((w - 1) / 4) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 64) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "61_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "60_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:46",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "61_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "62_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "61_Subtract:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:47",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "62_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "63_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "62_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:48",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "63_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "64_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "63_Multiply:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:49",
                  "type": {
                    "string": "float32['1', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "64_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 64, 1, 1])",
            "    z: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "65_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "64_Add:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "65_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "66_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "65_Relu:0",
                  "type": {
                    "string": "float32['bs', '64', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "64",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:50",
                  "type": {
                    "string": "float32['256', '64', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "64",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "66_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [256, 64, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 64, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 64))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([64, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 64) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "67_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "66_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:51",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "67_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "68_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "67_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:52",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "68_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "69_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "68_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:53",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "69_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "70_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "69_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:54",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "70_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "71_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "70_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "52_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "71_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "72_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "71_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "72_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "73_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "72_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:55",
                  "type": {
                    "string": "float32['128', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "73_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [128, 256, 1, 1])",
            "    out: tensor(float32, [bs, 128, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, (((((h - 1) / 4) + 1) - 1) + 1), (((((w - 1) / 4) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "74_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "73_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:56",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "74_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "75_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "74_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:57",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "75_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "76_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "75_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:58",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "76_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "77_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "76_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:59",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "77_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 4) + 1) == 1) ? 0 : v_2), (((((w - 1) / 4) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "78_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "77_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "78_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "79_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "78_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "79_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 128, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    out: tensor(float32, [bs, 128, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 128, ((1 + (((h - 1) / 4) + 1)) + 1), ((1 + (((w - 1) / 4) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 4) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 4) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "80_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "79_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 4) + 3)', '(((w - 1) / 4) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 4) + 3)",
                        "(((w - 1) / 4) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:60",
                  "type": {
                    "string": "float32['128', '128', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "128",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "80_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)])",
            "    w: tensor(float32, [128, 128, 3, 3])",
            "    out: tensor(float32, [bs, 128, (((((((h - 1) / 4) + 3) - 2) - 1) / 2) + 1), (((((((w - 1) / 4) + 3) - 2) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 4) + 3), (((w - 1) / 4) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, (((((((h - 1) / 4) + 3) - 2) - 1) / 2) + 1), (((((((w - 1) / 4) + 3) - 2) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 128) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "81_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "80_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:61",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "81_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "82_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "81_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:62",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "82_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "83_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "82_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:63",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "83_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "84_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "83_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:64",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "84_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "85_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "84_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "85_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "86_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "85_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:65",
                  "type": {
                    "string": "float32['512', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "86_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [512, 128, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "87_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "86_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:66",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "87_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "88_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "87_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:67",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "88_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "89_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "88_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:68",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "89_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "90_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "89_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:69",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "90_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "91_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "72_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 4) + 1)', '(((w - 1) / 4) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 4) + 1)",
                        "(((w - 1) / 4) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:70",
                  "type": {
                    "string": "float32['512', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "91_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)])",
            "    w: tensor(float32, [512, 256, 1, 1])",
            "    out: tensor(float32, [bs, 512, ((((((h - 1) / 4) + 1) - 1) / 2) + 1), ((((((w - 1) / 4) + 1) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 4) + 1), (((w - 1) / 4) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 4) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 4) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, ((((((h - 1) / 4) + 1) - 1) / 2) + 1), ((((((w - 1) / 4) + 1) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 256) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "92_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "91_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:71",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "92_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "93_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "92_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:72",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "93_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "94_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "93_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:73",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "94_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "95_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "94_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:74",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "95_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "96_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "90_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "95_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "96_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "97_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "96_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "97_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "98_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "97_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:75",
                  "type": {
                    "string": "float32['128', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "98_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [128, 512, 1, 1])",
            "    out: tensor(float32, [bs, 128, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "99_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "98_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:76",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "99_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "100_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "99_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:77",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "100_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "101_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "100_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:78",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "101_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "102_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "101_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:79",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "102_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "103_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "102_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "103_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "104_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "103_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "104_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    out: tensor(float32, [bs, 128, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 128, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 8) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 8) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "105_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "104_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:80",
                  "type": {
                    "string": "float32['128', '128', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "128",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "105_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)])",
            "    w: tensor(float32, [128, 128, 3, 3])",
            "    out: tensor(float32, [bs, 128, ((((((h - 1) / 8) + 3) - 2) - 1) + 1), ((((((w - 1) / 8) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, ((((((h - 1) / 8) + 3) - 2) - 1) + 1), ((((((w - 1) / 8) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "106_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "105_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:81",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "106_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "107_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "106_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:82",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "107_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "108_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "107_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:83",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "108_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "109_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "108_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:84",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "109_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "110_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "109_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "110_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "111_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "110_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:85",
                  "type": {
                    "string": "float32['512', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "111_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [512, 128, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "112_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "111_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:86",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "112_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "113_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "112_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:87",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "113_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "114_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "113_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:88",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "114_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "115_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "114_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:89",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "115_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "116_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "115_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "97_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "116_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "117_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "116_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "117_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "118_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "117_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:90",
                  "type": {
                    "string": "float32['128', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "118_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [128, 512, 1, 1])",
            "    out: tensor(float32, [bs, 128, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "119_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "118_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:91",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "119_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "120_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "119_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:92",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "120_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "121_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "120_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:93",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "121_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "122_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "121_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:94",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "122_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "123_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "122_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "123_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "124_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "123_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "124_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    out: tensor(float32, [bs, 128, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 128, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 8) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 8) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "125_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "124_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:95",
                  "type": {
                    "string": "float32['128', '128', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "128",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "125_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)])",
            "    w: tensor(float32, [128, 128, 3, 3])",
            "    out: tensor(float32, [bs, 128, ((((((h - 1) / 8) + 3) - 2) - 1) + 1), ((((((w - 1) / 8) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, ((((((h - 1) / 8) + 3) - 2) - 1) + 1), ((((((w - 1) / 8) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "126_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "125_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:96",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "126_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "127_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "126_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:97",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "127_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "128_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "127_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:98",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "128_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "129_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "128_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:99",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "129_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "130_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "129_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "130_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "131_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "130_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:100",
                  "type": {
                    "string": "float32['512', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "131_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [512, 128, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "132_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "131_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:101",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "132_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "133_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "132_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:102",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "133_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "134_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "133_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:103",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "134_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "135_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "134_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:104",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "135_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "136_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "135_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "117_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "136_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "137_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "136_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "137_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "138_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "137_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:105",
                  "type": {
                    "string": "float32['128', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "138_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [128, 512, 1, 1])",
            "    out: tensor(float32, [bs, 128, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "139_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "138_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:106",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "139_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "140_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "139_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:107",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "140_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "141_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "140_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:108",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "141_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "142_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "141_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:109",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "142_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "143_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "142_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "143_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "144_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "143_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "144_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    out: tensor(float32, [bs, 128, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 128, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 8) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 8) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "145_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "144_Pad:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:110",
                  "type": {
                    "string": "float32['128', '128', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "128",
                        "128",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "145_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)])",
            "    w: tensor(float32, [128, 128, 3, 3])",
            "    out: tensor(float32, [bs, 128, ((((((h - 1) / 8) + 3) - 2) - 1) + 1), ((((((w - 1) / 8) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 128, ((((((h - 1) / 8) + 3) - 2) - 1) + 1), ((((((w - 1) / 8) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 128) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "146_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "145_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:111",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "146_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "147_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "146_Subtract:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:112",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "147_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "148_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "147_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:113",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "148_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "149_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "148_Multiply:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:114",
                  "type": {
                    "string": "float32['1', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "149_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 128, 1, 1])",
            "    z: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "150_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "149_Add:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "150_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "151_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "150_Relu:0",
                  "type": {
                    "string": "float32['bs', '128', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "128",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:115",
                  "type": {
                    "string": "float32['512', '128', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "128",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "151_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [512, 128, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 128, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 128))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([128, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 128) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "152_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "151_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:116",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "152_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "153_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "152_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:117",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "153_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "154_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "153_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:118",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "154_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "155_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "154_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:119",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "155_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "156_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "155_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "137_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "156_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "157_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "156_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "157_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "158_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "157_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:120",
                  "type": {
                    "string": "float32['256', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "158_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [256, 512, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 8) + 1) - 1) + 1), (((((w - 1) / 8) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "159_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "158_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:121",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "159_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "160_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "159_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:122",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "160_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "161_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "160_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:123",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "161_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "162_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "161_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:124",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "162_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 8) + 1) == 1) ? 0 : v_2), (((((w - 1) / 8) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "163_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "162_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "163_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "164_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "163_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "164_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 256, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    out: tensor(float32, [bs, 256, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 256, ((1 + (((h - 1) / 8) + 1)) + 1), ((1 + (((w - 1) / 8) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 8) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 8) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "165_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "164_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 8) + 3)', '(((w - 1) / 8) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 8) + 3)",
                        "(((w - 1) / 8) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:125",
                  "type": {
                    "string": "float32['256', '256', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "256",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "165_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)])",
            "    w: tensor(float32, [256, 256, 3, 3])",
            "    out: tensor(float32, [bs, 256, (((((((h - 1) / 8) + 3) - 2) - 1) / 2) + 1), (((((((w - 1) / 8) + 3) - 2) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 8) + 3), (((w - 1) / 8) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((((h - 1) / 8) + 3) - 2) - 1) / 2) + 1), (((((((w - 1) / 8) + 3) - 2) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 256) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "166_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "165_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:126",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "166_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "167_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "166_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:127",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "167_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "168_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "167_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:128",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "168_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "169_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "168_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:129",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "169_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "170_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "169_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "170_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "171_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "170_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:130",
                  "type": {
                    "string": "float32['1024', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "171_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [1024, 256, 1, 1])",
            "    out: tensor(float32, [bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "172_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "171_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:131",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "172_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "173_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "172_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:132",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "173_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "174_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "173_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:133",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "174_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "175_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "174_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:134",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "175_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "176_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "157_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 8) + 1)', '(((w - 1) / 8) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 8) + 1)",
                        "(((w - 1) / 8) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:135",
                  "type": {
                    "string": "float32['1024', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "176_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)])",
            "    w: tensor(float32, [1024, 512, 1, 1])",
            "    out: tensor(float32, [bs, 1024, ((((((h - 1) / 8) + 1) - 1) / 2) + 1), ((((((w - 1) / 8) + 1) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 8) + 1), (((w - 1) / 8) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 8) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 8) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, ((((((h - 1) / 8) + 1) - 1) / 2) + 1), ((((((w - 1) / 8) + 1) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 512) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "177_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "176_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:136",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "177_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "178_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "177_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:137",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "178_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "179_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "178_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:138",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "179_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "180_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "179_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:139",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "180_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "181_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "175_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "180_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "181_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "182_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "181_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "182_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "183_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "182_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:140",
                  "type": {
                    "string": "float32['256', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "183_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [256, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 1024) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "184_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "183_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:141",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "184_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "185_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "184_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:142",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "185_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "186_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "185_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:143",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "186_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "187_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "186_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:144",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "187_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "188_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "187_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "188_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "189_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "188_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "189_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    out: tensor(float32, [bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 16) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 16) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "190_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "189_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:145",
                  "type": {
                    "string": "float32['256', '256', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "256",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "190_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)])",
            "    w: tensor(float32, [256, 256, 3, 3])",
            "    out: tensor(float32, [bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "191_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "190_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:146",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "191_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "192_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "191_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:147",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "192_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "193_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "192_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:148",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "193_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "194_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "193_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:149",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "194_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "195_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "194_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "195_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "196_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "195_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:150",
                  "type": {
                    "string": "float32['1024', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "196_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [1024, 256, 1, 1])",
            "    out: tensor(float32, [bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "197_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "196_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:151",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "197_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "198_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "197_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:152",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "198_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "199_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "198_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:153",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "199_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "200_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "199_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:154",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "200_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "201_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "200_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "182_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "201_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "202_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "201_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "202_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "203_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "202_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:155",
                  "type": {
                    "string": "float32['256', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "203_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [256, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 1024) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "204_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "203_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:156",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "204_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "205_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "204_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:157",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "205_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "206_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "205_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:158",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "206_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "207_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "206_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:159",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "207_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "208_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "207_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "208_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "209_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "208_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "209_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    out: tensor(float32, [bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 16) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 16) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "210_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "209_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:160",
                  "type": {
                    "string": "float32['256', '256', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "256",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "210_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)])",
            "    w: tensor(float32, [256, 256, 3, 3])",
            "    out: tensor(float32, [bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "211_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "210_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:161",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "211_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "212_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "211_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:162",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "212_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "213_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "212_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:163",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "213_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "214_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "213_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:164",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "214_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "215_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "214_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "215_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "216_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "215_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:165",
                  "type": {
                    "string": "float32['1024', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "216_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [1024, 256, 1, 1])",
            "    out: tensor(float32, [bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "217_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "216_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:166",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "217_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "218_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "217_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:167",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "218_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "219_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "218_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:168",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "219_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "220_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "219_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:169",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "220_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "221_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "220_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "202_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "221_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "222_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "221_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "222_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "223_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "222_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:170",
                  "type": {
                    "string": "float32['256', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "223_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [256, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 1024) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "224_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "223_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:171",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "224_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "225_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "224_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:172",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "225_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "226_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "225_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:173",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "226_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "227_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "226_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:174",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "227_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "228_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "227_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "228_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "229_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "228_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "229_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    out: tensor(float32, [bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 16) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 16) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "230_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "229_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:175",
                  "type": {
                    "string": "float32['256', '256', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "256",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "230_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)])",
            "    w: tensor(float32, [256, 256, 3, 3])",
            "    out: tensor(float32, [bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "231_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "230_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:176",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "231_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "232_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "231_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:177",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "232_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "233_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "232_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:178",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "233_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "234_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "233_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:179",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "234_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "235_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "234_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "235_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "236_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "235_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:180",
                  "type": {
                    "string": "float32['1024', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "236_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [1024, 256, 1, 1])",
            "    out: tensor(float32, [bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "237_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "236_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:181",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "237_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "238_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "237_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:182",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "238_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "239_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "238_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:183",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "239_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "240_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "239_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:184",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "240_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "241_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "240_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "222_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "241_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "242_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "241_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "242_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "243_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "242_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:185",
                  "type": {
                    "string": "float32['256', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "243_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [256, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 1024) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "244_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "243_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:186",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "244_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "245_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "244_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:187",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "245_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "246_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "245_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:188",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "246_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "247_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "246_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:189",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "247_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "248_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "247_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "248_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "249_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "248_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "249_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    out: tensor(float32, [bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 16) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 16) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "250_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "249_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:190",
                  "type": {
                    "string": "float32['256', '256', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "256",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "250_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)])",
            "    w: tensor(float32, [256, 256, 3, 3])",
            "    out: tensor(float32, [bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "251_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "250_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:191",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "251_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "252_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "251_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:192",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "252_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "253_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "252_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:193",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "253_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "254_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "253_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:194",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "254_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "255_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "254_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "255_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "256_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "255_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:195",
                  "type": {
                    "string": "float32['1024', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "256_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [1024, 256, 1, 1])",
            "    out: tensor(float32, [bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "257_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "256_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:196",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "257_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "258_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "257_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:197",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "258_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "259_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "258_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:198",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "259_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "260_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "259_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:199",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "260_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "261_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "260_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "242_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "261_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "262_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "261_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "262_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "263_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "262_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:200",
                  "type": {
                    "string": "float32['256', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "263_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [256, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 1024) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "264_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "263_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:201",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "264_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "265_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "264_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:202",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "265_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "266_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "265_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:203",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "266_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "267_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "266_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:204",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "267_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "268_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "267_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "268_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "269_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "268_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "269_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    out: tensor(float32, [bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 256, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 16) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 16) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "270_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "269_Pad:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:205",
                  "type": {
                    "string": "float32['256', '256', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "256",
                        "256",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "270_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)])",
            "    w: tensor(float32, [256, 256, 3, 3])",
            "    out: tensor(float32, [bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 256, ((((((h - 1) / 16) + 3) - 2) - 1) + 1), ((((((w - 1) / 16) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 256) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "271_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "270_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:206",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "271_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "272_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "271_Subtract:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:207",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "272_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "273_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "272_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:208",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "273_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "274_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "273_Multiply:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:209",
                  "type": {
                    "string": "float32['1', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "274_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 256, 1, 1])",
            "    z: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "275_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "274_Add:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "275_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "276_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "275_Relu:0",
                  "type": {
                    "string": "float32['bs', '256', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "256",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:210",
                  "type": {
                    "string": "float32['1024', '256', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1024",
                        "256",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "276_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [1024, 256, 1, 1])",
            "    out: tensor(float32, [bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 256, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 256))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 1024, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([256, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 1024) * 256) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "277_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "276_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:211",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "277_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "278_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "277_Subtract:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:212",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "278_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "279_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "278_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:213",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "279_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "280_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "279_Multiply:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:214",
                  "type": {
                    "string": "float32['1', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "280_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 1024, 1, 1])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "281_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "280_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "262_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "281_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    z: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "282_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "281_Add:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "282_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "283_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "282_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:215",
                  "type": {
                    "string": "float32['512', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "283_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [512, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 16) + 1) - 1) + 1), (((((w - 1) / 16) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 1024) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "284_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "283_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:216",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "284_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "285_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "284_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:217",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "285_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "286_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "285_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:218",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "286_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "287_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "286_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:219",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "287_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 16) + 1) == 1) ? 0 : v_2), (((((w - 1) / 16) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "288_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "287_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "288_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "289_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "288_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "289_Pad:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 512, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    out: tensor(float32, [bs, 512, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 512, ((1 + (((h - 1) / 16) + 1)) + 1), ((1 + (((w - 1) / 16) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 16) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 16) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "290_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "289_Pad:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 16) + 3)', '(((w - 1) / 16) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 16) + 3)",
                        "(((w - 1) / 16) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:220",
                  "type": {
                    "string": "float32['512', '512', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "512",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "290_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)])",
            "    w: tensor(float32, [512, 512, 3, 3])",
            "    out: tensor(float32, [bs, 512, (((((((h - 1) / 16) + 3) - 2) - 1) / 2) + 1), (((((((w - 1) / 16) + 3) - 2) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 16) + 3), (((w - 1) / 16) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((((h - 1) / 16) + 3) - 2) - 1) / 2) + 1), (((((((w - 1) / 16) + 3) - 2) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 512) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "291_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "290_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:221",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "291_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "292_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "291_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:222",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "292_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "293_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "292_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:223",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "293_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "294_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "293_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:224",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "294_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "295_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "294_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "295_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "296_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "295_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:225",
                  "type": {
                    "string": "float32['2048', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "2048",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "296_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    w: tensor(float32, [2048, 512, 1, 1])",
            "    out: tensor(float32, [bs, 2048, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 2048, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 2048) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "297_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "296_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:226",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "297_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "298_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "297_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:227",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "298_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "299_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "298_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:228",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "299_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "300_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "299_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:229",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "300_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "301_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "282_Relu:0",
                  "type": {
                    "string": "float32['bs', '1024', '(((h - 1) / 16) + 1)', '(((w - 1) / 16) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1024",
                        "(((h - 1) / 16) + 1)",
                        "(((w - 1) / 16) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:230",
                  "type": {
                    "string": "float32['2048', '1024', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "2048",
                        "1024",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "301_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[2, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)])",
            "    w: tensor(float32, [2048, 1024, 1, 1])",
            "    out: tensor(float32, [bs, 2048, ((((((h - 1) / 16) + 1) - 1) / 2) + 1), ((((((w - 1) / 16) + 1) - 1) / 2) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 1024, (((h - 1) / 16) + 1), (((w - 1) / 16) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 1024))) && ((0 <= v_2) && (v_2 < (((h - 1) / 16) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 16) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 2048, ((((((h - 1) / 16) + 1) - 1) / 2) + 1), ((((((w - 1) / 16) + 1) - 1) / 2) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([1024, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 2048) * 1024) + v_8), ((v_6 * 2) + v_9), ((v_7 * 2) + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "302_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "301_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:231",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "302_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "303_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "302_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:232",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "303_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "304_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "303_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:233",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "304_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "305_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "304_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:234",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "305_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "306_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "300_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "305_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "306_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "307_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "306_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "307_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "308_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "307_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:235",
                  "type": {
                    "string": "float32['512', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "308_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    w: tensor(float32, [512, 2048, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 2048))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([2048, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 2048) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "309_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "308_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:236",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "309_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "310_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "309_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:237",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "310_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "311_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "310_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:238",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "311_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "312_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "311_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:239",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "312_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "313_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "312_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "313_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "314_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "313_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "314_Pad:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 3)', '(((w - 1) / 32) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 3)",
                        "(((w - 1) / 32) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    out: tensor(float32, [bs, 512, ((1 + (((h - 1) / 32) + 1)) + 1), ((1 + (((w - 1) / 32) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 512, ((1 + (((h - 1) / 32) + 1)) + 1), ((1 + (((w - 1) / 32) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 32) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 32) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "315_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "314_Pad:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 3)', '(((w - 1) / 32) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 3)",
                        "(((w - 1) / 32) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:240",
                  "type": {
                    "string": "float32['512', '512', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "512",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "315_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 3), (((w - 1) / 32) + 3)])",
            "    w: tensor(float32, [512, 512, 3, 3])",
            "    out: tensor(float32, [bs, 512, ((((((h - 1) / 32) + 3) - 2) - 1) + 1), ((((((w - 1) / 32) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 32) + 3), (((w - 1) / 32) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, ((((((h - 1) / 32) + 3) - 2) - 1) + 1), ((((((w - 1) / 32) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "316_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "315_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:241",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "316_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "317_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "316_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:242",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "317_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "318_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "317_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:243",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "318_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "319_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "318_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:244",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "319_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "320_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "319_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "320_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "321_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "320_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:245",
                  "type": {
                    "string": "float32['2048', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "2048",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "321_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    w: tensor(float32, [2048, 512, 1, 1])",
            "    out: tensor(float32, [bs, 2048, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 2048, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 2048) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "322_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "321_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:246",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "322_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "323_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "322_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:247",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "323_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "324_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "323_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:248",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "324_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "325_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "324_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:249",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "325_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "326_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "325_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "307_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "326_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "327_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "326_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "327_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "328_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "327_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:250",
                  "type": {
                    "string": "float32['512', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "328_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    w: tensor(float32, [512, 2048, 1, 1])",
            "    out: tensor(float32, [bs, 512, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 2048))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([2048, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 2048) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "329_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "328_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:251",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "329_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "330_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "329_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:252",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "330_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "331_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "330_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:253",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "331_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "332_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "331_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:254",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "332_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "333_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "332_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "333_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "334_Pad",
          "type": {
            "name": "Pad",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "333_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "334_Pad:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 3)', '(((w - 1) / 32) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 3)",
                        "(((w - 1) / 32) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "pads",
              "type": "Sequence[int]",
              "value": "[0, 0, 1, 1, 0, 0, 1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "mode",
              "type": "str",
              "value": "constant",
              "visible": true,
              "description": ""
            },
            {
              "name": "value",
              "type": "float",
              "value": "0.0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: pad",
            "  parameters: ",
            "    data: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    out: tensor(float32, [bs, 512, ((1 + (((h - 1) / 32) + 1)) + 1), ((1 + (((w - 1) / 32) + 1)) + 1)])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[bs, 512, ((1 + (((h - 1) / 32) + 1)) + 1), ((1 + (((w - 1) / 32) + 1)) + 1)] where out[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= (v_2 - 1)) && ((v_2 - 1) < (((h - 1) / 32) + 1)))) && ((0 <= (v_3 - 1)) && ((v_3 - 1) < (((w - 1) / 32) + 1)))) ? data[v, v_1, (v_2 - 1), (v_3 - 1)] : 0.0f)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "335_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "334_Pad:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 3)', '(((w - 1) / 32) + 3)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 3)",
                        "(((w - 1) / 32) + 3)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:255",
                  "type": {
                    "string": "float32['512', '512', '3', '3']",
                    "shape": {
                      "dimensions": [
                        "512",
                        "512",
                        "3",
                        "3"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "335_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 3), (((w - 1) / 32) + 3)])",
            "    w: tensor(float32, [512, 512, 3, 3])",
            "    out: tensor(float32, [bs, 512, ((((((h - 1) / 32) + 3) - 2) - 1) + 1), ((((((w - 1) / 32) + 3) - 2) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 32) + 3), (((w - 1) / 32) + 3)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 3)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 3)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 512, ((((((h - 1) / 32) + 3) - 2) - 1) + 1), ((((((w - 1) / 32) + 3) - 2) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 3, 3], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 512) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "336_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "335_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:256",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "336_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "337_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "336_Subtract:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:257",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "337_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "338_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "337_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:258",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "338_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "339_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "338_Multiply:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:259",
                  "type": {
                    "string": "float32['1', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "339_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 512, 1, 1])",
            "    z: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "340_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "339_Add:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "340_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "341_Conv2d",
          "type": {
            "name": "Conv2d",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "340_Relu:0",
                  "type": {
                    "string": "float32['bs', '512', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "512",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:260",
                  "type": {
                    "string": "float32['2048', '512', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "2048",
                        "512",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "341_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "groups",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dilations",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: conv2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    w: tensor(float32, [2048, 512, 1, 1])",
            "    out: tensor(float32, [bs, 2048, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)])",
            "  inputs: [x, w]",
            "  outputs: [out]",
            "  computations: ",
            "    out_1: float32[bs, 512, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where out_1[v, v_1, v_2, v_3] = ((((((0 <= v) && (v < bs)) && ((0 <= v_1) && (v_1 < 512))) && ((0 <= v_2) && (v_2 < (((h - 1) / 32) + 1)))) && ((0 <= v_3) && (v_3 < (((w - 1) / 32) + 1)))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    out: float32[bs, 2048, (((((h - 1) / 32) + 1) - 1) + 1), (((((w - 1) / 32) + 1) - 1) + 1)] where out[v_4, v_5, v_6, v_7] = reduce([512, 1, 1], (v_8, v_9, v_10) => (out_1[v_4, (((v_5 / 2048) * 512) + v_8), (v_6 + v_9), (v_7 + v_10)] * w[v_5, v_8, v_9, v_10]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "342_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "341_Conv2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:261",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "342_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] - y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "343_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "342_Subtract:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:262",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "343_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "344_Multiply",
          "type": {
            "name": "Multiply",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "343_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:263",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "344_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: mul",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] * y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "345_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "344_Multiply:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:264",
                  "type": {
                    "string": "float32['1', '2048', '1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2048",
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "345_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [1, 2048, 1, 1])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[0, v_1, 0, 0])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "346_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "345_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "327_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "346_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    z: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where z[v, v_1, v_2, v_3] = (x[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)] + y[((bs == 1) ? 0 : v), v_1, (((((h - 1) / 32) + 1) == 1) ? 0 : v_2), (((((w - 1) / 32) + 1) == 1) ? 0 : v_3)])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "347_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "346_Add:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "347_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where y[v, v_1, v_2, v_3] = generic_max(x[v, v_1, v_2, v_3], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_4, v_5, v_6, v_7] => [v_4, v_5, v_6, v_7])",
            ")"
          ]
        },
        {
          "name": "348_AvgPool2d",
          "type": {
            "name": "AvgPool2d",
            "category": "pool"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "347_Relu:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((h - 1) / 32) + 1)', '(((w - 1) / 32) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((h - 1) / 32) + 1)",
                        "(((w - 1) / 32) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "348_AvgPool2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1)', '(((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1)",
                        "(((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "kernel",
              "type": "Sequence[Add]",
              "value": "((((h - 1) / 32) + 1), (((w - 1) / 32) + 1))",
              "visible": true,
              "description": ""
            },
            {
              "name": "stride",
              "type": "Sequence[int]",
              "value": "(1, 1)",
              "visible": true,
              "description": ""
            },
            {
              "name": "padding",
              "type": "Sequence[int]",
              "value": "(0, 0)",
              "visible": true,
              "description": ""
            },
            {
              "name": "ceil_mode",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            },
            {
              "name": "count_include_pad",
              "type": "bool",
              "value": "True",
              "visible": true,
              "description": ""
            },
            {
              "name": "divisor_override",
              "type": "NoneType",
              "value": "None",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: max_pool2d",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)])",
            "    y: tensor(float32, [bs, 2048, (((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1), (((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    pad: float32[bs, 2048, (((h - 1) / 32) + 1), (((w - 1) / 32) + 1)] where pad[v, v_1, v_2, v_3] = (((((0 <= v_2) && (v_2 < (((h - 1) / 32) + 1))) && (0 <= v_3)) && (v_3 < (((w - 1) / 32) + 1))) ? x[v, v_1, v_2, v_3] : 0.0f)",
            "    s: float32[bs, 2048, (((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1), (((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)] where s[v_4, v_5, v_6, v_7] = reduce([(((h - 1) / 32) + 1), (((w - 1) / 32) + 1)], (v_8, v_9) => pad[v_4, v_5, (v_6 + v_8), (v_7 + v_9)], sum)",
            "    y: float32[bs, 2048, (((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1), (((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)] where y[v_10, v_11, v_12, v_13] = (s[v_10, v_11, v_12, v_13] / ((((h - 1) / 32) + 1) * (((w - 1) / 32) + 1)))",
            "  attributes: {kernel: [(((h - 1) / 32) + 1), (((w - 1) / 32) + 1)], strides: (1, 1), padding: [0, 0, 0, 0], ceil_mode: False, count_include_pad: True, divisor_override: None, channel_last: False}",
            ")"
          ]
        },
        {
          "name": "349_Squeeze",
          "type": {
            "name": "Squeeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "348_AvgPool2d:0",
                  "type": {
                    "string": "float32['bs', '2048', '(((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1)', '(((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048",
                        "(((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1)",
                        "(((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "349_Squeeze:0",
                  "type": {
                    "string": "float32['bs', '2048']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "(2, 3)",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [bs, 2048, (((((h - 1) / 32) + 1) - (((h - 1) / 32) + 1)) + 1), (((((w - 1) / 32) + 1) - (((w - 1) / 32) + 1)) + 1)])",
            "    y: tensor(float32, [bs, 2048])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[bs, 2048] where y[v, v_1] = x[(v % bs), (v_1 % 2048), 0, 0]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3, v_4, v_5] => [v_2, v_3])",
            ")"
          ]
        },
        {
          "name": "350_Matmul",
          "type": {
            "name": "Matmul",
            "category": "layer"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "349_Squeeze:0",
                  "type": {
                    "string": "float32['bs', '2048']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "2048"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:265",
                  "type": {
                    "string": "float32['2048', '1000']",
                    "shape": {
                      "dimensions": [
                        "2048",
                        "1000"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "350_Matmul:0",
                  "type": {
                    "string": "float32['bs', '1000']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1000"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "require_prologue",
              "type": "bool",
              "value": "False",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: matmul",
            "  parameters: ",
            "    a: tensor(float32, [bs, 2048])",
            "    b: tensor(float32, [2048, 1000])",
            "    c: tensor(float32, [bs, 1000])",
            "  inputs: [a, b]",
            "  outputs: [c]",
            "  computations: ",
            "    c: float32[bs, 1000] where c[v, v_1] = reduce([2048], (v_2) => (a[v, v_2] * b[v_2, v_1]), sum)",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "351_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "350_Matmul:0",
                  "type": {
                    "string": "float32['bs', '1000']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1000"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:266",
                  "type": {
                    "string": "float32['1000']",
                    "shape": {
                      "dimensions": [
                        "1000"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "351_Add:0",
                  "type": {
                    "string": "float32['bs', '1000']",
                    "shape": {
                      "dimensions": [
                        "bs",
                        "1000"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [bs, 1000])",
            "    y: tensor(float32, [1000])",
            "    z: tensor(float32, [bs, 1000])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[bs, 1000] where z[v, v_1] = (x[((bs == 1) ? 0 : v), v_1] + y[v_1])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3] => [v_2, v_3])",
            ")"
          ]
        }
      ]
    }
  ],
  "description": "Converted from FlowGraph",
  "author": "",
  "company": "",
  "license": "",
  "domain": "",
  "source": "Hidet",
  "format": "netron"
}